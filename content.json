{"meta":{"title":"Henry Blog","subtitle":null,"description":null,"author":"Henry","url":"https://henrytien.github.io"},"pages":[{"title":"Tags","date":"2018-09-14T02:56:19.701Z","updated":"2018-09-13T11:09:15.846Z","comments":true,"path":"tags/index.html","permalink":"https://henrytien.github.io/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2018-09-14T02:56:19.694Z","updated":"2018-09-13T11:09:15.845Z","comments":true,"path":"about/index.html","permalink":"https://henrytien.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-09-14T02:56:19.698Z","updated":"2018-09-13T11:09:15.846Z","comments":true,"path":"categories/index.html","permalink":"https://henrytien.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"贝塞尔曲线和抛物线以及向量计算","slug":"贝塞尔曲线和抛物线以及向量计算","date":"2018-09-29T08:13:19.000Z","updated":"2018-09-29T08:14:36.667Z","comments":true,"path":"2018/09/29/贝塞尔曲线和抛物线以及向量计算/","link":"","permalink":"https://henrytien.github.io/2018/09/29/贝塞尔曲线和抛物线以及向量计算/","excerpt":"","text":"贝塞尔曲线和抛物线以及向量计算 贝塞尔曲线1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public float[,] calculate(float[,] poss, int precision)&#123; //维度，坐标轴数（二维坐标，三维坐标...） int dimersion = poss.Rank; //贝塞尔曲线控制点数（阶数） int number = poss.Length/2; //控制点数不小于 2 ，至少为二维坐标系 if (number &lt; 2 || dimersion &lt; 2) return null; float[,] result = new float[precision,dimersion]; int[] mi = new int[number]; mi[0] = mi[1] = 1; for (int i = 3; i &lt;= number; i++) &#123; int[] t = new int[i - 1]; for (int j = 0; j &lt; t.Length; j++) &#123; t[j] = mi[j]; &#125; mi[0] = mi[i - 1] = 1; for (int j = 0; j &lt; i - 2; j++) &#123; mi[j + 1] = t[j] + t[j + 1]; &#125; &#125; //计算坐标点 for (int i = 0; i &lt; precision; i++) &#123; float t = (float)i / precision; for (int j = 0; j &lt; dimersion; j++) &#123; double temp = 0.0f; for (int k = 0; k &lt; number; k++) &#123; temp += Math.Pow(1 - t, number - k - 1) * poss[k,j] * Math.Pow(t, k) * mi[k]; &#125; result[i,j] = (float)temp; &#125; &#125; return result;&#125; 抛物线系数计算以目标点为对称轴(下抛物线)，注释的以追击为对称轴(上抛物线)123456789public void GetFactor(float x1,float y1,float x2, float y2,ref float a, ref float b,ref float c)&#123; //a = (y1 - y2) / (2 * x1 * x2 - x1 * x1 - x2 * x2); a = (y1 - y2) / (x1 * x1 +x2* x2 -2* x2* x1); // b = -2 * x1 * (y1 - y2) / a; b = -2 * x2 * a; c = y1 - a * x1 * x1 - b * x1;&#125; 以下是使用的一个例子：123456789101112float a = 0.0f;float b = 0.0f;float c = 0.0f;GetFactor(m_fX, m_fY, m_target.m_fX, m_target.m_fY, ref a,ref b,ref c);float deltaX = m_myMap.GetDeltaTime() * 10;if(m_fX &gt; m_target.m_fX) m_fX -= deltaX;else m_fX += deltaX;m_fY = a * m_fX * m_fX + b * m_fX + c; 使用向量更完美的解决12345678910111213141516float deltaX = m_target.getX() - m_fX;float deltaY = m_target.getY() - m_fY;float distance = (float)Math.Sqrt(deltaX * deltaX + deltaY * deltaY);float x_missile = 0.0f;float y_missile = 0.0f;if (distance &gt; skill.SkillDefine.DistanceEpsilon)&#123; x_missile = deltaX / distance; y_missile = deltaY / distance;&#125;m_fPhySpeedX = x_missile * 20 * 0.2f + m_fPhySpeedX * 0.8f;m_fPhySpeedY = y_missile * 20 * 0.2f + m_fPhySpeedY * 0.8f;m_fX += m_myMap.GetDeltaTime() * m_fPhySpeedX;m_fY += m_myMap.GetDeltaTime() * m_fPhySpeedY;","categories":[{"name":"game","slug":"game","permalink":"https://henrytien.github.io/categories/game/"}],"tags":[]},{"title":"Largest Rectangle in Histogram","slug":"84. Largest Rectangle in Histogram","date":"2018-09-14T02:38:25.000Z","updated":"2018-09-14T02:33:24.848Z","comments":true,"path":"2018/09/14/84. Largest Rectangle in Histogram/","link":"","permalink":"https://henrytien.github.io/2018/09/14/84. Largest Rectangle in Histogram/","excerpt":"","text":"84. Largest Rectangle in Histogram 12345678910111213141516171819202122class Solution &#123;public: int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123; heights.insert(heights.begin(), 0); // dummy \"0\" added to make sure stack s will never be empty heights.push_back(0); // dummy \"0\" added to clear the stack at the end int len = heights.size(), res = 0, idx; stack&lt;int&gt; s; // stack to save \"heights\" index s.push(0); // index to the first dummy \"0\" for (int i = 1; i&lt;len; i++) &#123; while (heights[i]&lt;heights[idx = s.top()]) // if the current entry is out of order &#123; s.pop(); res = max(res, heights[idx] * (i - s.top() - 1)); // note how the width is calculated, use the previous index entry &#125; s.push(i); &#125; heights.erase(heights.begin()); // remove two dummy \"0\" heights.pop_back(); return res; &#125;&#125;;","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://henrytien.github.io/categories/algorithm/"}],"tags":[]},{"title":"126. Word Ladder II","slug":"126. Word Ladder II","date":"2018-09-14T02:38:25.000Z","updated":"2018-09-14T02:34:05.335Z","comments":true,"path":"2018/09/14/126. Word Ladder II/","link":"","permalink":"https://henrytien.github.io/2018/09/14/126. Word Ladder II/","excerpt":"","text":"126. Word Ladder II 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;vector&gt;#include &lt;string&gt;#include &lt;unordered_set&gt;#include &lt;unordered_map&gt;#include &lt;queue&gt;using namespace std;class Solution &#123;public: vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) &#123; vector&lt;vector&lt;string&gt;&gt; res; unordered_set&lt;string&gt; visit; //notice we need to clear visited word in list after finish this level of BFS queue&lt;vector&lt;string&gt;&gt; q; unordered_set&lt;string&gt; wordlist(wordList.begin(), wordList.end()); q.push(&#123; beginWord &#125;); bool flag = false; //to see if we find shortest path while (!q.empty()) &#123; int size = q.size(); for (int i = 0; i&lt;size; i++) &#123; //for this level vector&lt;string&gt; cur = q.front(); q.pop(); vector&lt;string&gt; newadd = addWord(cur.back(), wordlist); for (int j = 0; j&lt;newadd.size(); j++) &#123; //add a word into path vector&lt;string&gt; newline(cur.begin(), cur.end()); newline.push_back(newadd[j]); if (newadd[j] == endWord) &#123; flag = true; res.push_back(newline); &#125; visit.insert(newadd[j]); q.push(newline); &#125; &#125; if (flag) break; //do not BFS further for (auto it = visit.begin(); it != visit.end(); it++) wordlist.erase(*it); //erase visited one visit.clear(); &#125; return res; &#125; // find words with one char different in dict // hot-&gt;[dot,lot] vector&lt;string&gt; addWord(string word, unordered_set&lt;string&gt;&amp; wordlist) &#123; vector&lt;string&gt; res; for (int i = 0; i&lt;word.size(); i++) &#123; char s = word[i]; for (char c = 'a'; c &lt;= 'z'; c++) &#123; word[i] = c; if (wordlist.count(word)) res.push_back(word); &#125; word[i] = s; &#125; return res; &#125;&#125;;//#if DEBUGint main(int argc, char** argv) &#123; Solution a; string beginWord = \"hit\", endWord = \"cog\"; vector&lt;string&gt; wordList = &#123; \"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\" &#125;; a.findLadders(beginWord, endWord, wordList); return 0;&#125;//#endif","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://henrytien.github.io/categories/algorithm/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-09-13T10:54:21.111Z","updated":"2018-09-13T10:54:21.111Z","comments":true,"path":"2018/09/13/hello-world/","link":"","permalink":"https://henrytien.github.io/2018/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}