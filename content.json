{"meta":{"title":"Henry Blog","subtitle":null,"description":null,"author":"Henry","url":"https://henrytien.github.io"},"pages":[{"title":"Categories","date":"2018-09-14T02:56:19.698Z","updated":"2018-09-13T11:09:15.846Z","comments":true,"path":"categories/index.html","permalink":"https://henrytien.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2018-09-14T02:56:19.694Z","updated":"2018-09-13T11:09:15.845Z","comments":true,"path":"about/index.html","permalink":"https://henrytien.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-09-14T02:56:19.701Z","updated":"2018-09-13T11:09:15.846Z","comments":true,"path":"tags/index.html","permalink":"https://henrytien.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"126. Word Ladder II","slug":"126. Word Ladder II","date":"2018-09-14T02:38:25.000Z","updated":"2018-09-14T02:34:05.335Z","comments":true,"path":"2018/09/14/126. Word Ladder II/","link":"","permalink":"https://henrytien.github.io/2018/09/14/126. Word Ladder II/","excerpt":"","text":"126. Word Ladder II 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;vector&gt;#include &lt;string&gt;#include &lt;unordered_set&gt;#include &lt;unordered_map&gt;#include &lt;queue&gt;using namespace std;class Solution &#123;public: vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) &#123; vector&lt;vector&lt;string&gt;&gt; res; unordered_set&lt;string&gt; visit; //notice we need to clear visited word in list after finish this level of BFS queue&lt;vector&lt;string&gt;&gt; q; unordered_set&lt;string&gt; wordlist(wordList.begin(), wordList.end()); q.push(&#123; beginWord &#125;); bool flag = false; //to see if we find shortest path while (!q.empty()) &#123; int size = q.size(); for (int i = 0; i&lt;size; i++) &#123; //for this level vector&lt;string&gt; cur = q.front(); q.pop(); vector&lt;string&gt; newadd = addWord(cur.back(), wordlist); for (int j = 0; j&lt;newadd.size(); j++) &#123; //add a word into path vector&lt;string&gt; newline(cur.begin(), cur.end()); newline.push_back(newadd[j]); if (newadd[j] == endWord) &#123; flag = true; res.push_back(newline); &#125; visit.insert(newadd[j]); q.push(newline); &#125; &#125; if (flag) break; //do not BFS further for (auto it = visit.begin(); it != visit.end(); it++) wordlist.erase(*it); //erase visited one visit.clear(); &#125; return res; &#125; // find words with one char different in dict // hot-&gt;[dot,lot] vector&lt;string&gt; addWord(string word, unordered_set&lt;string&gt;&amp; wordlist) &#123; vector&lt;string&gt; res; for (int i = 0; i&lt;word.size(); i++) &#123; char s = word[i]; for (char c = 'a'; c &lt;= 'z'; c++) &#123; word[i] = c; if (wordlist.count(word)) res.push_back(word); &#125; word[i] = s; &#125; return res; &#125;&#125;;//#if DEBUGint main(int argc, char** argv) &#123; Solution a; string beginWord = \"hit\", endWord = \"cog\"; vector&lt;string&gt; wordList = &#123; \"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\" &#125;; a.findLadders(beginWord, endWord, wordList); return 0;&#125;//#endif","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://henrytien.github.io/categories/algorithm/"}],"tags":[]},{"title":"Largest Rectangle in Histogram","slug":"84. Largest Rectangle in Histogram","date":"2018-09-14T02:38:25.000Z","updated":"2018-09-14T02:33:24.848Z","comments":true,"path":"2018/09/14/84. Largest Rectangle in Histogram/","link":"","permalink":"https://henrytien.github.io/2018/09/14/84. Largest Rectangle in Histogram/","excerpt":"","text":"84. Largest Rectangle in Histogram 12345678910111213141516171819202122class Solution &#123;public: int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123; heights.insert(heights.begin(), 0); // dummy \"0\" added to make sure stack s will never be empty heights.push_back(0); // dummy \"0\" added to clear the stack at the end int len = heights.size(), res = 0, idx; stack&lt;int&gt; s; // stack to save \"heights\" index s.push(0); // index to the first dummy \"0\" for (int i = 1; i&lt;len; i++) &#123; while (heights[i]&lt;heights[idx = s.top()]) // if the current entry is out of order &#123; s.pop(); res = max(res, heights[idx] * (i - s.top() - 1)); // note how the width is calculated, use the previous index entry &#125; s.push(i); &#125; heights.erase(heights.begin()); // remove two dummy \"0\" heights.pop_back(); return res; &#125;&#125;;","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://henrytien.github.io/categories/algorithm/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-09-13T10:54:21.111Z","updated":"2018-09-13T10:54:21.111Z","comments":true,"path":"2018/09/13/hello-world/","link":"","permalink":"https://henrytien.github.io/2018/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}